<?php 

namespace App\Bots\pozorprace_bot\Commands\UserCommands;

use Romanlazko\Telegram\App\BotApi;
use App\Bots\pozorprace_bot\Models\PraceAnnouncement;
use Romanlazko\Telegram\App\Commands\Command;
use Romanlazko\Telegram\App\Commands\UserCommands\AdvertisementCommand;
use Romanlazko\Telegram\App\Entities\Response;
use Romanlazko\Telegram\App\Entities\Update;
use Romanlazko\Telegram\Exceptions\TelegramUserException;

class GetOwnerContact extends Command
{
    public static $command = 'get_owner_contact';

    public static $title = '';

    public static $pattern = "/^(\/start\s)(announcement)=(\d+)$/";

    protected $enabled = true;

    public function execute(Update $updates): Response
    {
        preg_match(static::$pattern, $updates->getMessage()?->getCommand(), $matches);

        $announcement = PraceAnnouncement::findOr($matches[3] ?? null, function () {
            throw new TelegramUserException("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        });

        if ($announcement->status === 'irrelevant') {
            throw new TelegramUserException("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ.");
        }

        if ($announcement->status === 'published') {
            $announcement->increment('views');
        }
        
        return $this->sendAnnouncementContact($announcement);
    }

    private function sendAnnouncementContact(PraceAnnouncement $announcement)
    {
        $buttons = BotApi::inlineKeyboardWithLink([
            'text'  => "üë§ –ö–æ–Ω—Ç–∞–∫—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∞", 
            'url'   => "tg://user?id={$announcement->chat()->first()->chat_id}"
        ]);

        $text = [
            "<b>–í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –Ω–∞ –∞–≤—Ç–æ—Ä–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:</b>",
            $this->prepare($announcement)
        ];

        return BotApi::sendMessage([
            'text'                      => implode("\n\n", $text),
            'reply_markup'              => $buttons,
            'chat_id'                   => $this->updates->getChat()->getId(),
            'parse_mode'                => 'HTML',
            'disable_web_page_preview'  => true,
        ]);
    }

    private function prepare(PraceAnnouncement $announcement) 
    {
        $text = [];

        if ($announcement->type) {
            $text[] = $announcement->type === 'propose' ? "#–ø—Ä–µ–¥–ª–∞–≥–∞—é_—Ä–∞–±–æ—Ç—É" : "#–∏—â—É_—Ä–∞–±–æ—Ç—É";
        }

        if ($announcement->title) {
            $text[] = "<b>{$announcement->title}</b>";
        }

        if ($announcement->caption) {
            $text[] = $announcement->caption;
        }

        if ($announcement->additional_info) {
            $text[] = $announcement->additional_info;
        }

        if ($announcement->salary_type AND $announcement->salary) {
            $salary_type_arr = [
                'hour' => "–≤ —á–∞—Å",
                'day' => "–≤ –¥–µ–Ω—å",
                'month' => "–≤ –º–µ—Å—è—Ü",
                'ex_post' => "–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É",
            ];
            $text[] = "<i>–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–∞—è –æ–ø–ª–∞—Ç–∞:</i> {$announcement->salary} CZK {$salary_type_arr[$announcement->salary_type]}";
        }

        if ($announcement->education) {
            $education_arr = [
                'not_required' => "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è",
                'secondary' => "–°—Ä–µ–¥–Ω–µ–µ",
                'higher' => "–í—ã—Å—à–µ–µ",
                'special' => "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ",
            ];
            $text[] = "<i>–¢—Ä–µ–±—É–µ–º–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</i> {$education_arr[$announcement->education]}";
        }

        if ($announcement->workplace) {
            $text[] = "<i>–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã:</i> {$announcement->workplace}";
        }

        return implode("\n\n", $text);
    }
}
